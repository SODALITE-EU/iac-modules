tosca_definitions_version: tosca_simple_yaml_1_3

imports:
  - docker_registry.yaml
  - docker_network.yaml

node_types:

  sodalite.nodes.DockerizedComponent:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      command:
        description: Commands list for starting the container
        default: ""
        type: list
        required: False
      entrypoint:
        description: Entrypoint list for starting the container
        default: null
        type: list
        required: False
      volumes:
        description: A list of mounted volumes for the docker container "host_path:container_path" like "/tmp/docker:/tmp"
        type: list
        default: []
        required: False
      ports:
        type: list
        description: Port binding for the docker container "exposed:internal" like "8081:8080"
        default: []
        required: False
      exposed_ports:
        description: Exposed ports of the container like "8081"
        type: string
        default: []
        required: False
      restart_policy:
        description: Restart policy [no, on-failure, always, unless-stopped]
        default: "always"
        type: string
        required: False
      restart:
        description: Force a matching container to be stopped and restarted.
        default: no
        type: string
        required: False
      env:
        description: Map for docker environment variables key-value dictionary
        required: False
        type: map
        default: {}
      env_file:
        description: Path to file on remote with env vars
        required: False
        type: string
        default: ""
      capabilities:
        description: List of capabilities to add to the container.
        required: False
        type: list
        default: []
      labels:
        description: Dictionary of key value pairs.
        required: False
        type: map
        default: {}
      image_name:
        description: The name of the image on the host
        required: True
        type: string
      hostname:
        description: The container's hostname.
        type: string
        required: False
      alias:
        description: Alias name for docker container
        type: string
        required: True
      sleep:
        type: integer
        description: Sleep after image is deployed
        default: 0
        required: False
      docker_network_name:
        description: Alias name for docker container
        type: string
        required: False
        default:
      ca_cert:
        description: Use a CA certificate when performing server verification by providing the path to a CA certificate file.
        type: string
        required: False
        default:
      client_cert:
        description: Path to the client's TLS certificate file.
        type: string
        required: False
        default:
      client_key:
        description: Path to the client's TLS key file.
        type: string
        required: False
        default:
      etc_hosts:
        description: Host-to-IP mappings
        required: False
        type: map
        default: {}
    attributes:
      ip_address:
        description: IP address of dockerized component
        type: string
    requirements:
      - host:
          capability: tosca.capabilities.Compute
          node: tosca.nodes.SoftwareComponent
          relationship: tosca.relationships.HostedOn
      - network:
          capability: tosca.capabilities.Network
          node: sodalite.nodes.DockerNetwork
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, 1 ]
      - registry:
          capability: tosca.capabilities.Node
          node: sodalite.nodes.DockerRegistry
          relationship: tosca.relationships.DependsOn
          occurrences: [ 1, 1 ]

    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              env:                  { type: map,     default: { get_property: [ SELF, env ] } }
              env_file:             { type: string,  default: { get_property: [ SELF, env_file ] } }
              ports:                { type: list,    default: { get_property: [ SELF, ports ] } }
              _capabilities:        { type: list,    default: { get_property: [ SELF, capabilities ] } }
              labels:               { type: map,     default: { get_property: [ SELF, labels ] } }
              restart_policy:       { type: string,  default: { get_property: [ SELF, restart_policy ] } }
              restart:              { type: string,  default: { get_property: [ SELF, restart ] } }
              image_name:           { type: string,  default: { get_property: [ SELF, image_name ] } }
              alias:                { type: string,  default: { get_property: [ SELF, alias ] } }
              exposed_ports:        { type: string,  default: { get_property: [ SELF, exposed_ports ] } }
              registry_url:         { type: string,  default: { get_property: [ SELF, registry, docker_registry_url ] } }
              volumes:              { type: list,    default: { get_property: [ SELF, volumes ] } }
              command:              { type: list,    default: { get_property: [ SELF, command ] } }
              entrypoint:           { type: list,    default: { get_property: [ SELF, entrypoint ] } }
              docker_network_name:  { type: string,  default: { get_property: [ SELF, docker_network_name ] } }
              ca_cert:              { type: string,  default: { get_property: [ SELF, ca_cert ] } }
              client_cert:          { type: string,  default: { get_property: [ SELF, client_cert ] } }
              client_key:           { type: string,  default: { get_property: [ SELF, client_key ] } }
              etc_hosts:            { type: map,     default: { get_property: [ SELF, etc_hosts ] } }
              sleep:                { type: integer, default: { get_property: [ SELF, sleep ] } }
              public_address:       { type: string,  default: { get_attribute: [ SELF, host, public_address ] } }
              ansible_user:         { type: string,  default: { get_attribute: [ SELF, host, username ] } }
            implementation:
              primary: playbooks/add_container.yml
          delete:
            inputs:
              alias:                { type: string, default: { get_property: [ SELF, alias ] } }
              ansible_user:         { type: string, default: { get_attribute: [ SELF, host, username ] } }
            implementation:
              primary: playbooks/remove_container.yml

  sodalite.nodes.TestComponent:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      test_delay:
        type: integer
        description: Delay for waiting container to come up
        required: false
      test_port:
        type: integer
        description: Port for testing availability of the container
        required: false
    interfaces:
      Standard:
        type: tosca.interfaces.node.lifecycle.Standard
        operations:
          create:
            inputs:
              component_name:     { type: string, default: { get_attribute: [ SELF, tested_component, tosca_name ] } }
              test_delay:         { type: string, default: { get_property: [ SELF, test_delay ] } }
              test_port:          { type: string, default: { get_property: [ SELF, test_port ] } }
            implementation:
              primary: playbooks/test_container.yml
    requirements:
      - tested_component:
          node: tosca.nodes.SoftwareComponent
          relationship: tosca.relationships.DependsOn
          capability: tosca.capabilities.Node
