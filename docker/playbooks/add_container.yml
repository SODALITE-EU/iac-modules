- hosts: all
  become_user: root
  become: yes
  vars:
    project_home: "{{ lookup('env', 'HOME') }}"
    image_path: "{{ image_name }}"
  tasks:

  - set_fact:
      image_path: "{{ registry_url }}/{{ image_name }}"
    when: registry_url is defined

  - name: "Launch {{ alias}} container and connect to network"
    docker_container:
      name: "{{ alias }}"
      hostname: "{{ hostname | default(omit) }}"
      image: "{{ image_path }}"
      restart_policy: "{{ restart_policy | default(omit) }}"
      restart: "{{ restart | default(omit) }}"
      detach: "{{ detach | default(omit) }}"
      pull: true
      auto_remove: no
      command:
        "{{ command }}"
      entrypoint:
        "{{ entrypoint | default(omit) }}"
      volumes:
        "{{ volumes }}"
      env:
        "{{ env }}"
      env_file:
        "{{ env_file }}"
      capabilities:
        "{{ _capabilities }}"
      ports:
         "{{ ports }}"
      exposed_ports:
        "{{ exposed_ports }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      etc_hosts:
        "{{ etc_hosts }}"
      labels: "{{ labels }}"
      networks:
        - name: "{{ docker_network_name }}"
          aliases:
            - "{{ alias }}"
    notify:
      - "{{ alias }} sleep"
    when: (docker_network_name != None) and (docker_network_name != "")

  - name: "Launch {{ alias}} container"
    docker_container:
      name: "{{ alias }}"
      hostname: "{{ hostname | default(omit) }}"
      image: "{{ image_path }}"
      restart_policy: "{{ restart_policy | default(omit) }}"
      restart: "{{ restart | default(omit) }}"
      detach: "{{ detach | default(omit) }}"
      pull: true
      auto_remove: no
      command:
        "{{ command }}"
      entrypoint:
        "{{ entrypoint | default(omit) }}"
      volumes:
        "{{ volumes }}"
      env:
        "{{ env }}"
      env_file:
        "{{ env_file }}"
      capabilities:
        "{{ _capabilities }}"
      ports:
         "{{ ports }}"
      exposed_ports:
        "{{ exposed_ports }}"
      ca_cert: "{{ ca_cert }}"
      client_cert: "{{ client_cert }}"
      client_key: "{{ client_key }}"
      etc_hosts:
        "{{ etc_hosts }}"
      labels: "{{ labels }}"

    notify:
      - "{{ alias }} sleep"
    when: (docker_network_name == None) or (docker_network_name == "")

  - shell: "docker inspect --format '{''{ .NetworkSettings.IPAddress }''}' {{ alias }}"
    register: result
    when: (docker_network_name != None) and (docker_network_name != "")

  - name: Extract ip address
    set_stats:
      data:
        ip_address: "{{ result.stdout }}"
    when: (docker_network_name != None) and (docker_network_name != "")

  handlers:
  - name: "{{ alias }} sleep"
    command:
      sleep "{{ sleep }}"
    when:
    - sleep > 0


